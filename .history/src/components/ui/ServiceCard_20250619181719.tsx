import React from "react";
import { useNavigate } from "react-router-dom";
import { Star, Clock, Heart, Award } from "lucide-react";
import { motion } from "framer-motion";
import type { Database } from "../../types/supabase";
import { supabase } from "../../lib/supabase";
import { useTelegram } from "../../hooks/useTelegram";
import { useUser } from "../../contexts/UserContext";
import { Avatar } from "../ui/Avatar";
import { addToFavoritesViaAPI, removeFromFavoritesViaAPI } from "../../lib/initializeFavorites";

type ServiceWithUser = Database["public"]["Tables"]["services"]["Row"] & {
  user: Database["public"]["Tables"]["users"]["Row"];
};

interface ServiceCardProps {
  service: ServiceWithUser;
  onFavoriteChange?: () => void;
}

const ServiceCard: React.FC<ServiceCardProps> = ({
  service,
  onFavoriteChange,
}) => {
  const navigate = useNavigate();
  const { user: currentUser } = useUser(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º UserContext –≤–º–µ—Å—Ç–æ TelegramContext
  const [isFavorite, setIsFavorite] = React.useState(false);
  const [loading, setLoading] = React.useState(false);

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º user –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤
  const user = Array.isArray(service.user) ? service.user[0] : service.user;

  React.useEffect(() => {
    if (!currentUser?.id) {
      console.log('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', currentUser);
      return;
    }

    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è:', {
      userId: currentUser.id,
      serviceId: service.id
    });

    (async () => {
      const { data, error } = await supabase
        .from("favorites")
        .select("*")
        .eq("user_id", currentUser.id)
        .eq("service_id", service.id)
        .maybeSingle();

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', { data, error });

      if (!error) {
        setIsFavorite(!!data);
      }
    })();
  }, [currentUser?.id, service.id]);

  const handleFavorite = async (e: React.MouseEvent) => {
    e.stopPropagation();

    if (!currentUser?.id) {
      console.error('–ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      return;
    }

    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', {
      userId: currentUser.id,
      serviceId: service.id,
      isFavorite,
      currentUser
    });

    setLoading(true);

    try {
      if (isFavorite) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        const { error } = await supabase
          .from("favorites")
          .delete()
          .eq("user_id", currentUser.id)
          .eq("service_id", service.id);

        if (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);

          // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
          try {
            await removeFromFavoritesViaAPI(currentUser.id, service.id);
            console.log('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API');
            setIsFavorite(false);
          } catch (apiErr) {
            console.error('API –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', apiErr);
            // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setIsFavorite(false);
          }
        } else {
          console.log('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
          setIsFavorite(false);
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        const { data, error } = await supabase
          .from("favorites")
          .insert({ user_id: currentUser.id, service_id: service.id })
          .select();

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);

          // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
          try {
            const result = await addToFavoritesViaAPI(currentUser.id, service.id);
            console.log('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API:', result);
            setIsFavorite(true);
          } catch (apiErr) {
            console.error('API –æ—à–∏–±–∫–∞:', apiErr);
            // –ï—Å–ª–∏ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            setIsFavorite(true);
          }
        } else {
          console.log('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', data);
          setIsFavorite(true);
        }
      }
    } catch (error) {
      console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);

      // –ï—Å–ª–∏ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setIsFavorite(!isFavorite);
    }

    setLoading(false);

    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    if (typeof onFavoriteChange === "function") {
      onFavoriteChange();
    }
  };

  const handleClick = () => {
    navigate(`/services/${service.id}`);
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "education":
        return "üéì";
      case "design":
        return "üé®";
      case "it":
        return "üíª";
      case "languages":
        return "üåê";
      case "business":
        return "üíº";
      case "lifestyle":
        return "üåø";
      case "writing":
        return "‚úçÔ∏è";
      case "music":
        return "üéµ";
      default:
        return "üîç";
    }
  };

  const getCategoryName = (category: string) => {
    switch (category) {
      case "education":
        return "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ";
      case "design":
        return "–î–∏–∑–∞–π–Ω";
      case "it":
        return "IT –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞";
      case "languages":
        return "–Ø–∑—ã–∫–∏";
      case "business":
        return "–ë–∏–∑–Ω–µ—Å";
      case "lifestyle":
        return "–õ–∞–π—Ñ—Å—Ç–∞–π–ª";
      case "writing":
        return "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥";
      case "music":
        return "–ú—É–∑—ã–∫–∞";
      default:
        return "–î—Ä—É–≥–æ–µ";
    }
  };

  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString("ru-RU", {
      day: "numeric",
      month: "long",
    });
  };

  return (
    <motion.div
      whileHover={{ y: -2, scale: 1.01, boxShadow: '0 8px 24px rgba(51,207,247,0.15)' }}
      whileTap={{ scale: 0.98 }}
      className="bg-white rounded-xl shadow-card hover:shadow-card transition-all duration-200 overflow-hidden relative group cursor-pointer border border-gray-100 flex flex-col min-h-[180px]"
      onClick={handleClick}
    >
      {/* –§–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∏ */}
      <div className="relative w-full h-28 overflow-hidden flex-shrink-0">
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å */}
        {service.image_url && (
          <img
            src={service.image_url}
            alt={service.title}
            className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            style={{ borderTopLeftRadius: 16, borderTopRightRadius: 16 }}
          />
        )}
        {/* –ò–∑–±—Ä–∞–Ω–Ω–æ–µ */}
        <button
          className={`absolute top-2 right-2 z-20 p-1.5 rounded-full bg-white/90 shadow transition-all duration-200 group-hover:scale-110 group-active:scale-95 ${isFavorite ? 'text-red-500' : 'text-gray-300'} hover:bg-red-50`}
          onClick={handleFavorite}
          aria-label={isFavorite ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
          disabled={loading}
          tabIndex={0}
          style={{ minWidth: 0 }}
        >
          <Heart size={18} fill={isFavorite ? '#ef4444' : 'none'} />
        </button>
        {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å */}
        {currentUser?.id === service.user_id && (
          <button
            className={`absolute top-2 left-2 z-20 p-1.5 rounded-full bg-primary-50 text-primary-700 shadow hover:bg-primary-100 transition-all duration-200 group-hover:scale-110 group-active:scale-95`}
            style={{ minWidth: 0 }}
            onClick={e => { e.stopPropagation(); navigate(`/services/${service.id}?edit=1`); }}
          >
            <svg width="16" height="16" fill="none" viewBox="0 0 24 24"><path d='M4 21h17M12.5 8.5l3 3M7 20l-3-3 9-9a2.121 2.121 0 013 3l-9 9z' stroke='currentColor' strokeWidth='2' strokeLinecap='round' strokeLinejoin='round' /></svg>
          </button>
        )}
      </div>
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col p-3 gap-2">
        <div className="flex items-center justify-between mb-1 gap-1 min-h-[22px]">
          <span className="flex items-center gap-1 text-[10px] font-semibold bg-primary-50 text-primary-700 px-1.5 py-0.5 rounded max-w-[60%] overflow-hidden">
            <span className="marquee-loop">
              {getCategoryIcon(service.category)} {getCategoryName(service.category)}
              &nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;{getCategoryIcon(service.category)} {getCategoryName(service.category)}
            </span>
          </span>
          <span className="flex items-center gap-1 text-xs font-bold text-orange-500 bg-orange-50 px-1.5 py-0.5 rounded shadow-sm whitespace-nowrap">
            {service.price}
            <svg width='12' height='12' viewBox='0 0 24 24' fill='none'><circle cx='12' cy='12' r='10' fill='#FDBA74' /><text x='12' y='16' textAnchor='middle' fontSize='8' fill='#fff' fontWeight='bold'>‚ÇΩ</text></svg>
          </span>
        </div>
        <h3 className="font-semibold text-gray-900 text-base line-clamp-2 group-hover:underline transition-all duration-200">
          {service.title}
        </h3>
        <p className="text-gray-600 text-xs line-clamp-2 min-h-[32px]">{service.description}</p>
        <div className="flex items-center justify-between mt-auto pt-1">
          <div className="flex items-center gap-1">
            <span
              className="flex items-center gap-1 cursor-pointer group/avatar"
              onClick={e => { e.stopPropagation(); navigate(`/profile/${user.id}`); }}
              title={`–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name}`}
            >
              <Avatar src={user.avatar_url} name={user.name} size={24} className="border border-gray-200 shadow-sm group-hover/avatar:ring-2 group-hover/avatar:ring-primary-400 transition" />
              <span className="text-[11px] text-gray-700 font-medium truncate max-w-[60px] group-hover/avatar:underline group-hover/avatar:text-primary-600 transition flex items-center gap-0.5">
                {user.name}
                {(user as any).display_badge_id && (
                  <Award size={10} className="text-yellow-500" />
                )}
              </span>
            </span>
          </div>
          <div className="flex items-center gap-0.5 text-yellow-500">
            <Star size={13} className="fill-yellow-500" />
            <span className="text-xs font-medium">{service.rating?.toFixed(1) || '‚Äî'}</span>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default ServiceCard;
